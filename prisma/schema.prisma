// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?  // ?: optional
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now()) // member since 2020
  updatedAt DateTime @updatedAt

  // Relations: 
  posts Post[] // One-to-many
  comments Comment[] // One-to-many
  likes Like[] // One-to-many

  followers Follows[] @relation("following") // 追蹤我的人
  following Follows[] @relation("follower") // 我追蹤的人

  notifications Notification[] @relation("userNotifications") // 我接收的通知
  notificationsCreated Notification[] @relation("notificationCreator") // 我觸發的通知
}

model Post{
  id        String    @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade) // 刪除作者刪除 post
  comments Comment[]
  likes Like[]
  notifications Notification[]
}


model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]  // 與這條評論相關的所有通知

  @@index([authorId,postId]) 
}

model Like {
  id        String   @id @default(cuid())
  postId    String                 
  userId    String                 
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // 同時索引 userId 和 postId 的組合，userId 在前，postId 在後意味著可以單獨用 userId 查詢，但不能單獨用 postId 查詢（這時索引無效）
  @@unique([userId,postId]) // 確保 userId 和 postId 的組合是唯一的
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) 
  @@id([followerId, followingId])  // 確保同一個 follower 不能重複關注同一個 following
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}
